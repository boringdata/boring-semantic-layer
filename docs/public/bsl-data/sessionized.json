{
  "markdown": "# Sessionized Data\n\nAnalyze time-series events grouped into sessions based on activity gaps. This pattern identifies and aggregates user or system behavior within discrete time-bounded sessions.\n\n## Overview\n\nThe sessionization pattern allows you to:\n\n- Define session boundaries based on inactivity timeouts\n- Group sequential events into logical sessions\n- Calculate session-level metrics (duration, event count, conversion)\n- Handle session spanning across multiple time periods\n\n## Setup\n\nLet's create user activity data with timestamps:\n\n```setup_raw_data\nimport ibis\nfrom ibis import _\nfrom boring_semantic_layer import to_semantic_table\n\n# Create user activity events with minute offsets instead of timestamps\nactivity_data = ibis.memtable({\n    \"user_id\": [\"user1\", \"user1\", \"user1\", \"user1\", \"user2\", \"user2\", \"user2\", \"user3\", \"user3\", \"user3\", \"user3\", \"user3\"],\n    \"minute_offset\": [0, 5, 10, 45, 2, 40, 42, 1, 3, 7, 50, 52],  # Minutes from start\n    \"page_url\": [\"/home\", \"/products\", \"/cart\", \"/checkout\", \"/home\", \"/products\", \"/cart\",\n                 \"/home\", \"/about\", \"/products\", \"/home\", \"/contact\"],\n    \"action\": [\"view\", \"view\", \"view\", \"purchase\", \"view\", \"view\", \"view\",\n               \"view\", \"view\", \"view\", \"view\", \"view\"]\n})\n```\n\n<collapsedcodeblock code-block=\"setup_raw_data\" title=\"Setup: Create Raw Activity Data\"></collapsedcodeblock>\n\nNow create a semantic table with dimensions and measures:\n\n```semantic_table_def\nfrom boring_semantic_layer import to_semantic_table\n\nactivity_st = (\n    to_semantic_table(activity_data, name=\"activity\")\n    .with_dimensions(\n        user_id=lambda t: t.user_id,\n        minute_offset=lambda t: t.minute_offset,\n        page_url=lambda t: t.page_url,\n        action=lambda t: t.action\n    )\n    .with_measures(\n        event_count=lambda t: t.count(),\n        unique_users=lambda t: t.user_id.nunique()\n    )\n)\n```\n\n## Identify Session Boundaries\n\nUse window functions to identify session starts based on inactivity gaps:\n\n```query_session_boundaries\nfrom ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"page_url\", \"action\")\n    .aggregate()\n    .mutate(\n        # Calculate time since previous event for same user\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        # Calculate minutes since last event\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        # Mark session start (>30 min gap or first event)\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull()\n    )\n    .order_by(_.user_id, _.minute_offset)\n)\n```\n\n<bslquery code-block=\"query_session_boundaries\" />\n\n## Assign Session IDs\n\nCreate session identifiers by counting session starts:\n\n```query_with_session_ids\nfrom ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"page_url\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        # Cumulative sum of session starts gives session ID\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)  # Cumulative sum\n        )\n    )\n    .order_by(_.user_id, _.minute_offset)\n)\n```\n\n<bslquery code-block=\"query_with_session_ids\" />\n\n## Calculate Session Metrics\n\nAggregate events by session to get session-level metrics:\n\n```query_session_metrics\nfrom ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)\n        )\n    )\n    .group_by(\"user_id\", \"session_id\")\n    .aggregate(\n        events_in_session=lambda t: t.count(),\n        session_start_min=lambda t: t.minute_offset.min(),\n        session_end_min=lambda t: t.minute_offset.max(),\n        has_purchase=lambda t: (t.action == \"purchase\").any()\n    )\n    .mutate(\n        session_duration_min=lambda t: (t.session_end_min - t.session_start_min)\n    )\n    .order_by(_.user_id, _.session_id)\n)\n```\n\n<bslquery code-block=\"query_session_metrics\" />\n\n## User-Level Session Summary\n\nSummarize sessions per user:\n\n```query_user_summary\nfrom ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)\n        )\n    )\n    .group_by(\"user_id\", \"session_id\")\n    .aggregate(\n        events_in_session=lambda t: t.count(),\n        has_purchase=lambda t: (t.action == \"purchase\").any()\n    )\n    .group_by(\"user_id\")\n    .aggregate(\n        total_sessions=lambda t: t.count(),\n        total_events=lambda t: t.events_in_session.sum(),\n        sessions_with_purchase=lambda t: t.has_purchase.cast(\"int32\").sum(),\n        avg_events_per_session=lambda t: t.events_in_session.mean().round(2)\n    )\n    .mutate(\n        conversion_rate=lambda t: (t.sessions_with_purchase / t.total_sessions * 100).round(2)\n    )\n    .order_by(_.total_events.desc())\n)\n```\n\n<bslquery code-block=\"query_user_summary\" />\n\n## Use Cases\n\n**Web Analytics**: Group user page views and interactions into sessions, with a session ending after 30 minutes of inactivity. Calculate metrics like session duration, pages per session, and conversion rate.\n\n**IoT Device Monitoring**: Sessionize sensor readings to identify distinct usage periods and calculate metrics like average session length and activity intensity.\n\n**Application Usage Tracking**: Analyze how users interact with applications by grouping activities into sessions, identifying drop-off points, and measuring engagement patterns.\n\n## Key Takeaways\n\n- Use `lag()` window function to find time since previous event\n- Compare time gaps to session timeout threshold (e.g., 30 minutes)\n- Use cumulative sum of session starts to assign session IDs\n- Calculate session metrics like duration, event count, and conversions\n- Aggregate sessions to user level for summary statistics\n\n## Next Steps\n\n- Learn about [Indexing](/advanced/indexing) for trend analysis\n- Explore [Bucketing](/advanced/bucketing) to categorize session durations\n",
  "queries": {
    "setup_raw_data": {
      "code": "import ibis\nfrom ibis import _\nfrom boring_semantic_layer import to_semantic_table\n\n# Create user activity events with minute offsets instead of timestamps\nactivity_data = ibis.memtable({\n    \"user_id\": [\"user1\", \"user1\", \"user1\", \"user1\", \"user2\", \"user2\", \"user2\", \"user3\", \"user3\", \"user3\", \"user3\", \"user3\"],\n    \"minute_offset\": [0, 5, 10, 45, 2, 40, 42, 1, 3, 7, 50, 52],  # Minutes from start\n    \"page_url\": [\"/home\", \"/products\", \"/cart\", \"/checkout\", \"/home\", \"/products\", \"/cart\",\n                 \"/home\", \"/about\", \"/products\", \"/home\", \"/contact\"],\n    \"action\": [\"view\", \"view\", \"view\", \"purchase\", \"view\", \"view\", \"view\",\n               \"view\", \"view\", \"view\", \"view\", \"view\"]\n})",
      "sql": "Error generating SQL: Table.sql() missing 1 required positional argument: 'query'",
      "table": {
        "columns": [
          "user_id",
          "minute_offset",
          "page_url",
          "action"
        ],
        "data": [
          [
            "user1",
            0,
            "/home",
            "view"
          ],
          [
            "user1",
            5,
            "/products",
            "view"
          ],
          [
            "user1",
            10,
            "/cart",
            "view"
          ],
          [
            "user1",
            45,
            "/checkout",
            "purchase"
          ],
          [
            "user2",
            2,
            "/home",
            "view"
          ],
          [
            "user2",
            40,
            "/products",
            "view"
          ],
          [
            "user2",
            42,
            "/cart",
            "view"
          ],
          [
            "user3",
            1,
            "/home",
            "view"
          ],
          [
            "user3",
            3,
            "/about",
            "view"
          ],
          [
            "user3",
            7,
            "/products",
            "view"
          ],
          [
            "user3",
            50,
            "/home",
            "view"
          ],
          [
            "user3",
            52,
            "/contact",
            "view"
          ]
        ]
      }
    },
    "query_session_boundaries": {
      "code": "from ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"page_url\", \"action\")\n    .aggregate()\n    .mutate(\n        # Calculate time since previous event for same user\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        # Calculate minutes since last event\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        # Mark session start (>30 min gap or first event)\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull()\n    )\n    .order_by(_.user_id, _.minute_offset)\n)",
      "sql": "SELECT\n  \"t4\".\"user_id\",\n  \"t4\".\"minute_offset\",\n  \"t4\".\"page_url\",\n  \"t4\".\"action\",\n  \"t4\".\"prev_minute\",\n  \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\" AS \"minutes_since_last\",\n  (\n    (\n      \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\"\n    ) > 30\n  )\n  OR (\n    \"t4\".\"prev_minute\" IS NULL\n  ) AS \"is_session_start\"\nFROM (\n  SELECT\n    \"t3\".\"user_id\",\n    \"t3\".\"minute_offset\",\n    \"t3\".\"page_url\",\n    \"t3\".\"action\",\n    LAG(\"t3\".\"minute_offset\") OVER (PARTITION BY \"t3\".\"user_id\" ORDER BY \"t3\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"prev_minute\"\n  FROM (\n    SELECT\n      *\n    FROM (\n      SELECT\n        \"t1\".\"user_id\",\n        \"t1\".\"minute_offset\",\n        \"t1\".\"page_url\",\n        \"t1\".\"action\"\n      FROM (\n        SELECT\n          *\n        FROM \"ibis_pandas_memtable_m5dgklmvbfc25jmzkkksx4ffwa\" AS \"t0\"\n      ) AS \"t1\"\n      GROUP BY\n        1,\n        2,\n        3,\n        4\n    ) AS \"t2\"\n  ) AS \"t3\"\n) AS \"t4\"\nORDER BY\n  \"t4\".\"user_id\" ASC,\n  \"t4\".\"minute_offset\" ASC",
      "table": {
        "columns": [
          "user_id",
          "minute_offset",
          "page_url",
          "action",
          "prev_minute",
          "minutes_since_last",
          "is_session_start"
        ],
        "data": [
          [
            "user1",
            0,
            "/home",
            "view",
            null,
            null,
            true
          ],
          [
            "user1",
            5,
            "/products",
            "view",
            0.0,
            5.0,
            false
          ],
          [
            "user1",
            10,
            "/cart",
            "view",
            5.0,
            5.0,
            false
          ],
          [
            "user1",
            45,
            "/checkout",
            "purchase",
            10.0,
            35.0,
            true
          ],
          [
            "user2",
            2,
            "/home",
            "view",
            null,
            null,
            true
          ],
          [
            "user2",
            40,
            "/products",
            "view",
            2.0,
            38.0,
            true
          ],
          [
            "user2",
            42,
            "/cart",
            "view",
            40.0,
            2.0,
            false
          ],
          [
            "user3",
            1,
            "/home",
            "view",
            null,
            null,
            true
          ],
          [
            "user3",
            3,
            "/about",
            "view",
            1.0,
            2.0,
            false
          ],
          [
            "user3",
            7,
            "/products",
            "view",
            3.0,
            4.0,
            false
          ],
          [
            "user3",
            50,
            "/home",
            "view",
            7.0,
            43.0,
            true
          ],
          [
            "user3",
            52,
            "/contact",
            "view",
            50.0,
            2.0,
            false
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-4efd92e9813fd3005639d7e1e17bd010"
          },
          "mark": {
            "type": "text"
          },
          "encoding": {
            "text": {
              "value": "Complex query - consider custom visualization"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-4efd92e9813fd3005639d7e1e17bd010": [
              {
                "user_id": "user1",
                "minute_offset": 5,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 10,
                "page_url": "/cart",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 1,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 0,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 3,
                "page_url": "/about",
                "action": "view"
              },
              {
                "user_id": "user2",
                "minute_offset": 40,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 7,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 45,
                "page_url": "/checkout",
                "action": "purchase"
              },
              {
                "user_id": "user3",
                "minute_offset": 50,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 52,
                "page_url": "/contact",
                "action": "view"
              },
              {
                "user_id": "user2",
                "minute_offset": 42,
                "page_url": "/cart",
                "action": "view"
              },
              {
                "user_id": "user2",
                "minute_offset": 2,
                "page_url": "/home",
                "action": "view"
              }
            ]
          }
        }
      }
    },
    "query_with_session_ids": {
      "code": "from ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"page_url\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        # Cumulative sum of session starts gives session ID\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)  # Cumulative sum\n        )\n    )\n    .order_by(_.user_id, _.minute_offset)\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t5\".\"user_id\",\n    \"t5\".\"minute_offset\",\n    \"t5\".\"page_url\",\n    \"t5\".\"action\",\n    \"t5\".\"prev_minute\",\n    \"t5\".\"minutes_since_last\",\n    \"t5\".\"is_session_start\",\n    SUM(CAST(\"t5\".\"is_session_start\" AS INT)) OVER (PARTITION BY \"t5\".\"user_id\" ORDER BY \"t5\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"session_id\"\n  FROM (\n    SELECT\n      \"t4\".\"user_id\",\n      \"t4\".\"minute_offset\",\n      \"t4\".\"page_url\",\n      \"t4\".\"action\",\n      \"t4\".\"prev_minute\",\n      \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\" AS \"minutes_since_last\",\n      (\n        (\n          \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\"\n        ) > 30\n      )\n      OR (\n        \"t4\".\"prev_minute\" IS NULL\n      ) AS \"is_session_start\"\n    FROM (\n      SELECT\n        \"t3\".\"user_id\",\n        \"t3\".\"minute_offset\",\n        \"t3\".\"page_url\",\n        \"t3\".\"action\",\n        LAG(\"t3\".\"minute_offset\") OVER (PARTITION BY \"t3\".\"user_id\" ORDER BY \"t3\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"prev_minute\"\n      FROM (\n        SELECT\n          *\n        FROM (\n          SELECT\n            \"t1\".\"user_id\",\n            \"t1\".\"minute_offset\",\n            \"t1\".\"page_url\",\n            \"t1\".\"action\"\n          FROM (\n            SELECT\n              *\n            FROM \"ibis_pandas_memtable_m5dgklmvbfc25jmzkkksx4ffwa\" AS \"t0\"\n          ) AS \"t1\"\n          GROUP BY\n            1,\n            2,\n            3,\n            4\n        ) AS \"t2\"\n      ) AS \"t3\"\n    ) AS \"t4\"\n  ) AS \"t5\"\n) AS \"t6\"\nORDER BY\n  \"t6\".\"user_id\" ASC,\n  \"t6\".\"minute_offset\" ASC",
      "table": {
        "columns": [
          "user_id",
          "minute_offset",
          "page_url",
          "action",
          "prev_minute",
          "minutes_since_last",
          "is_session_start",
          "session_id"
        ],
        "data": [
          [
            "user1",
            0,
            "/home",
            "view",
            null,
            null,
            true,
            1
          ],
          [
            "user1",
            5,
            "/products",
            "view",
            0.0,
            5.0,
            false,
            1
          ],
          [
            "user1",
            10,
            "/cart",
            "view",
            5.0,
            5.0,
            false,
            1
          ],
          [
            "user1",
            45,
            "/checkout",
            "purchase",
            10.0,
            35.0,
            true,
            2
          ],
          [
            "user2",
            2,
            "/home",
            "view",
            null,
            null,
            true,
            1
          ],
          [
            "user2",
            40,
            "/products",
            "view",
            2.0,
            38.0,
            true,
            2
          ],
          [
            "user2",
            42,
            "/cart",
            "view",
            40.0,
            2.0,
            false,
            2
          ],
          [
            "user3",
            1,
            "/home",
            "view",
            null,
            null,
            true,
            1
          ],
          [
            "user3",
            3,
            "/about",
            "view",
            1.0,
            2.0,
            false,
            1
          ],
          [
            "user3",
            7,
            "/products",
            "view",
            3.0,
            4.0,
            false,
            1
          ],
          [
            "user3",
            50,
            "/home",
            "view",
            7.0,
            43.0,
            true,
            2
          ],
          [
            "user3",
            52,
            "/contact",
            "view",
            50.0,
            2.0,
            false,
            2
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-8f452fa86f409e78111fcd4fad8f0703"
          },
          "mark": {
            "type": "text"
          },
          "encoding": {
            "text": {
              "value": "Complex query - consider custom visualization"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-8f452fa86f409e78111fcd4fad8f0703": [
              {
                "user_id": "user2",
                "minute_offset": 40,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 7,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user2",
                "minute_offset": 2,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 0,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user2",
                "minute_offset": 42,
                "page_url": "/cart",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 52,
                "page_url": "/contact",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 3,
                "page_url": "/about",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 45,
                "page_url": "/checkout",
                "action": "purchase"
              },
              {
                "user_id": "user3",
                "minute_offset": 50,
                "page_url": "/home",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 5,
                "page_url": "/products",
                "action": "view"
              },
              {
                "user_id": "user1",
                "minute_offset": 10,
                "page_url": "/cart",
                "action": "view"
              },
              {
                "user_id": "user3",
                "minute_offset": 1,
                "page_url": "/home",
                "action": "view"
              }
            ]
          }
        }
      }
    },
    "query_session_metrics": {
      "code": "from ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)\n        )\n    )\n    .group_by(\"user_id\", \"session_id\")\n    .aggregate(\n        events_in_session=lambda t: t.count(),\n        session_start_min=lambda t: t.minute_offset.min(),\n        session_end_min=lambda t: t.minute_offset.max(),\n        has_purchase=lambda t: (t.action == \"purchase\").any()\n    )\n    .mutate(\n        session_duration_min=lambda t: (t.session_end_min - t.session_start_min)\n    )\n    .order_by(_.user_id, _.session_id)\n)",
      "sql": "SELECT\n  \"t8\".\"user_id\",\n  \"t8\".\"session_id\",\n  \"t8\".\"events_in_session\",\n  \"t8\".\"session_start_min\",\n  \"t8\".\"session_end_min\",\n  \"t8\".\"has_purchase\",\n  \"t8\".\"session_end_min\" - \"t8\".\"session_start_min\" AS \"session_duration_min\"\nFROM (\n  SELECT\n    \"t7\".\"user_id\",\n    \"t7\".\"session_id\",\n    COUNT(*) AS \"events_in_session\",\n    MIN(\"t7\".\"minute_offset\") AS \"session_start_min\",\n    MAX(\"t7\".\"minute_offset\") AS \"session_end_min\",\n    BOOL_OR(\"t7\".\"action\" = 'purchase') AS \"has_purchase\"\n  FROM (\n    SELECT\n      *\n    FROM (\n      SELECT\n        \"t5\".\"user_id\",\n        \"t5\".\"minute_offset\",\n        \"t5\".\"action\",\n        \"t5\".\"prev_minute\",\n        \"t5\".\"minutes_since_last\",\n        \"t5\".\"is_session_start\",\n        SUM(CAST(\"t5\".\"is_session_start\" AS INT)) OVER (PARTITION BY \"t5\".\"user_id\" ORDER BY \"t5\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"session_id\"\n      FROM (\n        SELECT\n          \"t4\".\"user_id\",\n          \"t4\".\"minute_offset\",\n          \"t4\".\"action\",\n          \"t4\".\"prev_minute\",\n          \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\" AS \"minutes_since_last\",\n          (\n            (\n              \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\"\n            ) > 30\n          )\n          OR (\n            \"t4\".\"prev_minute\" IS NULL\n          ) AS \"is_session_start\"\n        FROM (\n          SELECT\n            \"t3\".\"user_id\",\n            \"t3\".\"minute_offset\",\n            \"t3\".\"action\",\n            LAG(\"t3\".\"minute_offset\") OVER (PARTITION BY \"t3\".\"user_id\" ORDER BY \"t3\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"prev_minute\"\n          FROM (\n            SELECT\n              *\n            FROM (\n              SELECT\n                \"t1\".\"user_id\",\n                \"t1\".\"minute_offset\",\n                \"t1\".\"action\"\n              FROM (\n                SELECT\n                  *\n                FROM \"ibis_pandas_memtable_m5dgklmvbfc25jmzkkksx4ffwa\" AS \"t0\"\n              ) AS \"t1\"\n              GROUP BY\n                1,\n                2,\n                3\n            ) AS \"t2\"\n          ) AS \"t3\"\n        ) AS \"t4\"\n      ) AS \"t5\"\n    ) AS \"t6\"\n  ) AS \"t7\"\n  GROUP BY\n    1,\n    2\n) AS \"t8\"\nORDER BY\n  \"t8\".\"user_id\" ASC,\n  \"t8\".\"session_id\" ASC",
      "table": {
        "columns": [
          "user_id",
          "session_id",
          "events_in_session",
          "session_start_min",
          "session_end_min",
          "has_purchase",
          "session_duration_min"
        ],
        "data": [
          [
            "user1",
            1,
            3,
            0,
            10,
            false,
            10
          ],
          [
            "user1",
            2,
            1,
            45,
            45,
            true,
            0
          ],
          [
            "user2",
            1,
            1,
            2,
            2,
            false,
            0
          ],
          [
            "user2",
            2,
            2,
            40,
            42,
            false,
            2
          ],
          [
            "user3",
            1,
            3,
            1,
            7,
            false,
            6
          ],
          [
            "user3",
            2,
            2,
            50,
            52,
            false,
            2
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-905630679c171c2e6098c93976c1faaa"
          },
          "mark": {
            "type": "text"
          },
          "encoding": {
            "text": {
              "value": "Complex query - consider custom visualization"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-905630679c171c2e6098c93976c1faaa": [
              {
                "user_id": "user1",
                "session_id": 1,
                "events_in_session": 3,
                "session_start_min": 0,
                "session_end_min": 10,
                "has_purchase": false
              },
              {
                "user_id": "user2",
                "session_id": 1,
                "events_in_session": 1,
                "session_start_min": 2,
                "session_end_min": 2,
                "has_purchase": false
              },
              {
                "user_id": "user3",
                "session_id": 2,
                "events_in_session": 2,
                "session_start_min": 50,
                "session_end_min": 52,
                "has_purchase": false
              },
              {
                "user_id": "user1",
                "session_id": 2,
                "events_in_session": 1,
                "session_start_min": 45,
                "session_end_min": 45,
                "has_purchase": true
              },
              {
                "user_id": "user2",
                "session_id": 2,
                "events_in_session": 2,
                "session_start_min": 40,
                "session_end_min": 42,
                "has_purchase": false
              },
              {
                "user_id": "user3",
                "session_id": 1,
                "events_in_session": 3,
                "session_start_min": 1,
                "session_end_min": 7,
                "has_purchase": false
              }
            ]
          }
        }
      }
    },
    "query_user_summary": {
      "code": "from ibis import _\n\nresult = (\n    activity_st\n    .group_by(\"user_id\", \"minute_offset\", \"action\")\n    .aggregate()\n    .mutate(\n        prev_minute=lambda t: t.minute_offset.lag().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset\n        ),\n        minutes_since_last=lambda t: t.minute_offset - t.prev_minute,\n        is_session_start=lambda t: (t.minutes_since_last > 30) | t.prev_minute.isnull(),\n        session_id=lambda t: t.is_session_start.cast(\"int32\").sum().over(\n            group_by=\"user_id\",\n            order_by=t.minute_offset,\n            rows=(None, 0)\n        )\n    )\n    .group_by(\"user_id\", \"session_id\")\n    .aggregate(\n        events_in_session=lambda t: t.count(),\n        has_purchase=lambda t: (t.action == \"purchase\").any()\n    )\n    .group_by(\"user_id\")\n    .aggregate(\n        total_sessions=lambda t: t.count(),\n        total_events=lambda t: t.events_in_session.sum(),\n        sessions_with_purchase=lambda t: t.has_purchase.cast(\"int32\").sum(),\n        avg_events_per_session=lambda t: t.events_in_session.mean().round(2)\n    )\n    .mutate(\n        conversion_rate=lambda t: (t.sessions_with_purchase / t.total_sessions * 100).round(2)\n    )\n    .order_by(_.total_events.desc())\n)",
      "sql": "SELECT\n  \"t10\".\"user_id\",\n  \"t10\".\"total_sessions\",\n  \"t10\".\"total_events\",\n  \"t10\".\"sessions_with_purchase\",\n  \"t10\".\"avg_events_per_session\",\n  CAST(ROUND((\n    \"t10\".\"sessions_with_purchase\" / \"t10\".\"total_sessions\"\n  ) * 100, 2) AS DOUBLE) AS \"conversion_rate\"\nFROM (\n  SELECT\n    \"t9\".\"user_id\",\n    COUNT(*) AS \"total_sessions\",\n    SUM(\"t9\".\"events_in_session\") AS \"total_events\",\n    SUM(CAST(\"t9\".\"has_purchase\" AS INT)) AS \"sessions_with_purchase\",\n    CAST(ROUND(AVG(\"t9\".\"events_in_session\"), 2) AS DOUBLE) AS \"avg_events_per_session\"\n  FROM (\n    SELECT\n      *\n    FROM (\n      SELECT\n        \"t7\".\"user_id\",\n        \"t7\".\"session_id\",\n        COUNT(*) AS \"events_in_session\",\n        BOOL_OR(\"t7\".\"action\" = 'purchase') AS \"has_purchase\"\n      FROM (\n        SELECT\n          *\n        FROM (\n          SELECT\n            \"t5\".\"user_id\",\n            \"t5\".\"minute_offset\",\n            \"t5\".\"action\",\n            \"t5\".\"prev_minute\",\n            \"t5\".\"minutes_since_last\",\n            \"t5\".\"is_session_start\",\n            SUM(CAST(\"t5\".\"is_session_start\" AS INT)) OVER (PARTITION BY \"t5\".\"user_id\" ORDER BY \"t5\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"session_id\"\n          FROM (\n            SELECT\n              \"t4\".\"user_id\",\n              \"t4\".\"minute_offset\",\n              \"t4\".\"action\",\n              \"t4\".\"prev_minute\",\n              \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\" AS \"minutes_since_last\",\n              (\n                (\n                  \"t4\".\"minute_offset\" - \"t4\".\"prev_minute\"\n                ) > 30\n              )\n              OR (\n                \"t4\".\"prev_minute\" IS NULL\n              ) AS \"is_session_start\"\n            FROM (\n              SELECT\n                \"t3\".\"user_id\",\n                \"t3\".\"minute_offset\",\n                \"t3\".\"action\",\n                LAG(\"t3\".\"minute_offset\") OVER (PARTITION BY \"t3\".\"user_id\" ORDER BY \"t3\".\"minute_offset\" ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"prev_minute\"\n              FROM (\n                SELECT\n                  *\n                FROM (\n                  SELECT\n                    \"t1\".\"user_id\",\n                    \"t1\".\"minute_offset\",\n                    \"t1\".\"action\"\n                  FROM (\n                    SELECT\n                      *\n                    FROM \"ibis_pandas_memtable_m5dgklmvbfc25jmzkkksx4ffwa\" AS \"t0\"\n                  ) AS \"t1\"\n                  GROUP BY\n                    1,\n                    2,\n                    3\n                ) AS \"t2\"\n              ) AS \"t3\"\n            ) AS \"t4\"\n          ) AS \"t5\"\n        ) AS \"t6\"\n      ) AS \"t7\"\n      GROUP BY\n        1,\n        2\n    ) AS \"t8\"\n  ) AS \"t9\"\n  GROUP BY\n    1\n) AS \"t10\"\nORDER BY\n  \"t10\".\"total_events\" DESC",
      "table": {
        "columns": [
          "user_id",
          "total_sessions",
          "total_events",
          "sessions_with_purchase",
          "avg_events_per_session",
          "conversion_rate"
        ],
        "data": [
          [
            "user3",
            2,
            5,
            0,
            2.5,
            0.0
          ],
          [
            "user1",
            2,
            4,
            1,
            2.0,
            50.0
          ],
          [
            "user2",
            2,
            3,
            0,
            1.5,
            0.0
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-894a0390f023fdf105e197ff6b824ba8"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "user_id",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "user_id",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "total_sessions",
                "total_events",
                "sessions_with_purchase",
                "avg_events_per_session"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-894a0390f023fdf105e197ff6b824ba8": [
              {
                "user_id": "user2",
                "total_sessions": 2,
                "total_events": 3,
                "sessions_with_purchase": 0,
                "avg_events_per_session": 1.5
              },
              {
                "user_id": "user1",
                "total_sessions": 2,
                "total_events": 4,
                "sessions_with_purchase": 1,
                "avg_events_per_session": 2.0
              },
              {
                "user_id": "user3",
                "total_sessions": 2,
                "total_events": 5,
                "sessions_with_purchase": 0,
                "avg_events_per_session": 2.5
              }
            ]
          }
        }
      }
    }
  },
  "files": {}
}