{
  "markdown": "# Query Methods\n\nRetrieve data from your semantic tables using `group_by()` and `aggregate()` methods.\n\n## Overview\n\nBSL provides a simple and consistent query API that works with your semantic table definitions:\n\n- **`group_by()`**: Group data by dimension names (strings only, must be defined in `with_dimensions()`)\n- **`aggregate()`**: Calculate measures (with or without grouping)\n- **`filter()`**: Apply conditions to filter data\n- **`mutate()`**: Transform aggregated results\n- **`order_by()`**: Sort results\n- **`limit()`**: Restrict number of rows\n\n## Setup\n\n```setup_table\nimport ibis\nfrom ibis import _\nfrom boring_semantic_layer import to_semantic_table\n\n# Create Ibis table\nflights_tbl = ibis.memtable({\n    \"origin\": [\"NYC\", \"LAX\", \"NYC\", \"SFO\", \"LAX\", \"NYC\", \"SFO\", \"LAX\", \"NYC\"],\n    \"carrier\": [\"AA\", \"UA\", \"AA\", \"UA\", \"AA\", \"UA\", \"AA\", \"UA\", \"AA\"],\n    \"distance\": [2789, 2789, 2902, 2902, 347, 2789, 347, 347, 2789],\n    \"duration\": [330, 330, 360, 360, 65, 330, 65, 65, 330],\n})\n\n# Create semantic table\nflights_st = (\n    to_semantic_table(flights_tbl, name=\"flights\")\n    .with_dimensions(\n        origin=lambda t: t.origin,\n        carrier=lambda t: t.carrier,\n    )\n    .with_measures(\n        flight_count=lambda t: t.count(),\n        total_distance=lambda t: t.distance.sum(),\n        avg_duration=lambda t: t.duration.mean(),\n    )\n)\n```\n\n<collapsedcodeblock code-block=\"setup_table\" title=\"Setup: Create Ibis Table and Semantic Table\"></collapsedcodeblock>\n\n## group_by()\n\nThe `group_by()` method groups data by one or more dimensions.\n\n<note type=\"info\">\n`group_by()` only accepts string dimension names that were previously defined in `with_dimensions()`. It does not support lambda functions or unbound `_` syntax.\n</note>\n\n### Single Dimension\n\nGroup by a single dimension:\n\n```query_single_dimension\n# Group by one dimension\nresult = flights_st.group_by(\"origin\").aggregate(\"flight_count\")\n```\n\n<bslquery code-block=\"query_single_dimension\"></bslquery>\n\n### Multiple Dimensions\n\nGroup by multiple dimensions to create detailed breakdowns:\n\n```query_multiple_dimensions\n# Group by multiple dimensions\nresult = flights_st.group_by(\"origin\", \"carrier\").aggregate(\"flight_count\")\n```\n\n<bslquery code-block=\"query_multiple_dimensions\"></bslquery>\n\n### No Grouping\n\nCalculate overall statistics across all rows using `group_by()` with no arguments:\n\n```query_no_grouping\n# Aggregate entire dataset without grouping\nresult = flights_st.group_by().aggregate(\"flight_count\", \"total_distance\", \"avg_duration\")\n```\n\n<bslquery code-block=\"query_no_grouping\"></bslquery>\n\n## aggregate()\n\nThe `aggregate()` method calculates measures after grouping. You can reference pre-defined measures or compute new ones on-the-fly.\n\n### Pre-defined Measures\n\nReference measures by their string names:\n\n```query_predefined_measures\n# Use measures defined in with_measures()\nresult = flights_st.group_by(\"origin\").aggregate(\"flight_count\", \"avg_duration\")\n```\n\n<bslquery code-block=\"query_predefined_measures\"></bslquery>\n\n### On-the-Fly Transformations\n\nAdd computed measures directly in `aggregate()` without modifying the semantic table:\n\n```query_onthefly_measures\n# Mix predefined and computed measures\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",              # Pre-defined measure\n        \"avg_duration\",               # Pre-defined measure\n        total_miles=lambda t: t.distance.sum(),  # Computed on-the-fly\n        max_distance=lambda t: t.flight_count + 2  # You can reference other measures as well\n    )\n)\n```\n\n<bslquery code-block=\"query_onthefly_measures\"></bslquery>\n\n<note type=\"info\">\nOn-the-fly measures let you add context-specific calculations without modifying your semantic table definition. This keeps your base model clean while enabling flexible queries.\n</note>\n\n### Referencing Table Columns\n\nYou can reference **any column from the underlying table** in `aggregate()`, not just pre-defined measures. This is useful when you need one-off calculations without cluttering your semantic table definition.\n\n```query_table_columns\n# Reference table columns directly in aggregate()\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",                           # Pre-defined measure\n        total_distance=lambda t: t.distance.sum(),  # Table column 'distance'\n        avg_duration=lambda t: t.duration.mean(),   # Table column 'duration'\n        distance_in_km=lambda t: (t.distance * 1.60934).sum()  # Transform then aggregate\n    )\n)\n```\n\n<bslquery code-block=\"query_table_columns\"></bslquery>\n\n**Key points:**\n- Table columns **must be aggregated** (e.g., `.sum()`, `.mean()`, `.max()`, `.count()`)\n- You can transform columns before aggregating (e.g., `(t.distance * 1.60934).sum()`)\n- This works for any column in the underlying table, even if not defined as a dimension or measure\n- Use this for ad-hoc calculations without modifying your semantic table\n\n<note type=\"warning\">\nTable columns cannot be used without an aggregation function. For example, `lambda t: t.distance` will fail. You must use `lambda t: t.distance.sum()` or another aggregation.\n</note>\n\n## filter() / order_by() / limit() \n\nCombine `filter()`, `order_by()`, and `limit()` to refine your query results.\n\n```query_filter_order_limit\nfrom ibis import _\n\n# Filter data, sort, and limit results\nresult = (\n    flights_st\n    .filter(lambda t: t.origin.isin([\"NYC\", \"LAX\"]))  # Filter origins\n    .filter(_.distance > 500)                          # Filter distance using _ syntax\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"avg_duration\")        # Aggregate both measures\n    .order_by(ibis.desc(\"flight_count\"))              # Sort by flight_count descending\n    .limit(5)                                          # Top 5 results\n)\n```\n\n<bslquery code-block=\"query_filter_order_limit\"></bslquery>\n\n**Key points:**\n- **`filter()`**: Use lambda or `_` syntax to apply conditions before aggregation\n- **`order_by()`**: Use `ibis.desc()` for descending order, or column name for ascending\n- **`limit()`**: Restrict the number of rows returned\n\n## nest()\n\nThe `nest` parameter in `aggregate()` creates nested data structures (arrays of structs) in your query results. This is useful for API responses, hierarchical visualizations, and preserving relationships in aggregated data.\n\nUse `nest` to collect rows as structured arrays within each group:\n\n```query_basic_nest\nfrom ibis import _\n\n# Nest flight details within each origin\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",\n        \"total_distance\",\n        # Create nested array of flight details\n        nest={\"flights\": lambda t: t.group_by([\"carrier\", \"distance\"])}\n    )\n)\n```\n\n<bslquery code-block=\"query_basic_nest\"></bslquery>\n\n**How it works:**\n- The `nest` parameter accepts a dictionary: `{\"column_name\": lambda t: ...}`\n- The lambda specifies which columns to collect using `.group_by()` or `.select()`\n- Results in an array of structs column named `flights`\n\nYou can also use `.select()` to specify which columns to nest:\n\n```query_nest_select\n# Nest specific columns\nresult = (\n    flights_st\n    .group_by(\"carrier\")\n    .aggregate(\n        \"flight_count\",\n        nest={\"routes\": lambda t: t.select(\"origin\", \"distance\", \"duration\")}\n    )\n)\n```\n\n<bslquery code-block=\"query_nest_select\"></bslquery>\n\nAfter nesting, you can re-group which automatically unnests, then access the nested fields.\n\n**Step 1: Create nested data**\n\nFirst, create the nested structure. Notice the `flights` column contains arrays of structs:\n\n```query_nest_step1\nfrom ibis import _\n\n# Create nested data structure\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",\n        nest={\"flights\": lambda t: t.group_by([\"carrier\", \"distance\"])}\n    )\n)\n```\n\n<bslquery code-block=\"query_nest_step1\"></bslquery>\n\n**Step 2: Re-group to unnest and access fields**\n\nNow re-group on the same dimension, which automatically unnests the array, allowing you to access the nested fields:\n\n```query_nest_step2\nfrom ibis import _\n\n# Re-grouping automatically unnests the 'flights' array\nresult = (\n    result\n    .group_by(\"origin\")\n    .aggregate(\n        total_flights=lambda t: t.flight_count.sum(),\n        # Access unnested fields from the flights array\n        unique_carriers=lambda t: t.flights.carrier.nunique(),\n        avg_distance=lambda t: t.flights.distance.mean()\n    )\n)\n```\n\n<bslquery code-block=\"query_nest_step2\"></bslquery>\n\n**Use cases for nesting:**\n- **API responses**: Create JSON-compatible hierarchical structures\n- **Hierarchical data**: Preserve parent-child relationships in results\n- **Data export**: Generate nested documents for external systems\n- **Drill-down analysis**: Keep detailed records available in aggregated views\n\n<note type=\"info\">\nFor more complex nesting patterns and multi-level hierarchies, see [Advanced Nesting Patterns](/advanced/nesting).\n</note>\n\n## mutate()\n\nThe `mutate()` method transforms aggregated results by adding new computed columns. This is different from on-the-fly measures in `aggregate()` \u2014 `mutate()` works on already-aggregated data.\n\n<note type=\"warning\">\n**Key difference:** `.aggregate()` computes from raw data, while `.mutate()` transforms already-aggregated results.\n</note>\n\n```query_mutate\nfrom ibis import _\n\n# Add post-aggregation calculations\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"total_distance\")\n    .mutate(\n        avg_distance_per_flight=lambda t: t.total_distance / t.flight_count,\n        flight_category=lambda t: ibis.case()\n            .when(t.flight_count >= 3, \"high\")\n            .when(t.flight_count >= 2, \"medium\")\n            .else_(\"low\")\n            .end()\n    )\n)\n```\n\n<bslquery code-block=\"query_mutate\"></bslquery>\n\n**Use cases for `mutate()`:**\n- Calculate ratios from aggregated measures (e.g., `total / count`)\n- Create categories based on aggregated values\n- Add labels or formatting to results\n- Transform aggregated columns using the full power of Ibis\n\nFor more transformations, see [Ibis Table API reference](https://ibis-project.org/reference/expression-tables.html#ibis.expr.types.relations.Table.mutate).\n\n## Window Functions with .over()\n\nWindow functions perform calculations across ordered rows, enabling operations like running totals, moving averages, and ranking. Unlike regular aggregations that reduce many rows to one, window functions preserve row count while adding computed values.\n\n<note type=\"warning\">\n**Important:** Window functions can only be applied **after aggregation**, typically within a `.mutate()` call. They cannot be defined directly in measures.\n</note>\n\n**Common window functions:**\n- **`lag()` / `lead()`**: Access previous/next row values for period-over-period comparisons\n- **`cumsum()`**: Calculate running totals\n- **`.over(window)`**: Apply functions over sliding windows (e.g., moving averages)\n- **`rank()` / `row_number()`**: Assign ranks or sequential numbers to rows\n\nHere's a simple example:\n\n```query_window_example\nfrom ibis import _\n\n# First aggregate to daily level\ndaily_flights = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"total_distance\")\n    .order_by(\"origin\")\n)\n\n# Then apply window function for cumulative distance\nwindow_spec = ibis.window(order_by=\"origin\")\n\nresult = daily_flights.mutate(\n    cumulative_distance=_.total_distance.cumsum(),\n    flight_rank=lambda t: ibis.rank().over(ibis.window(order_by=_.flight_count.desc()))\n).limit(10)\n```\n\n<bslquery code-block=\"query_window_example\"></bslquery>\n\n**Key points:**\n- Window functions are applied **after** `.aggregate()` using `.mutate()`\n- Use `.order_by()` to establish row order for window operations\n- Combine with `ibis.window()` for advanced sliding window calculations\n\nFor comprehensive examples including lag/lead, moving averages, and ranking, see [Window Functions](/advanced/windowing).\n\n## as_table()\n\nAfter filtering or aggregating data, you may want to perform additional semantic operations. However, intermediate results don't always preserve the semantic table's dimensions and measures.\n\nThe Problem: Lost Semantic Information\n\nWhen you aggregate data, the result loses semantic metadata. The aggregated result is a `SemanticAggregate` expression, which doesn't have `.dimensions` or `.measures` attributes:\n\n```query_as_table_problem\nfrom ibis import _\n\n# Aggregate the data - this returns a SemanticAggregate\nagg_result = flights_st.group_by(\"origin\").aggregate(\"flight_count\", \"total_distance\")\n\n# Show the type/class of the result\nresult_type = type(agg_result).__name__\n\n# Try to access .dimensions - this will raise an AttributeError\ntry:\n    dimensions = agg_result.dimensions\n    result = f\"Type: {result_type}\\nDimensions: {dimensions}\"\nexcept AttributeError as e:\n    result = f\"Type: {result_type}\\nError: {str(e)}\"\n\nresult\n```\n\n<regularoutput code-block=\"query_as_table_problem\"></regularoutput>\n\n\nAfter aggregation, you can no longer access the original semantic table's dimensions and measures metadata.\n\nThe Solution: Use as_table()\n\nThe `as_table()` method converts results back into a `SemanticModel`. However, note that for aggregations, the metadata is intentionally cleared (since columns are now materialized):\n\n```query_as_table_after_aggregate\nfrom ibis import _\n\n# Aggregate the data\nagg_result = flights_st.group_by(\"origin\").aggregate(\"flight_count\", \"total_distance\")\n\n# Convert to SemanticModel using as_table()\nagg_table = agg_result.as_table()\n\n# Now .dimensions and .measures attributes exist, but they're empty (metadata was cleared)\nresult = f\"Type: {type(agg_table).__name__}\\nDimensions: {agg_table.dimensions}\\nMeasures: {agg_table.measures}\"\n```\n\n<regularoutput code-block=\"query_as_table_after_aggregate\"></regularoutput>\n\n### When Metadata IS Preserved\n\nFor operations like `filter()`, `order_by()`, and `limit()`, `as_table()` **preserves** the original semantic metadata:\n\n```query_as_table_filter_preserved\nfrom ibis import _\n\n# Filter the data\nfiltered = flights_st.filter(_.distance > 2000)\n\n# Convert back to SemanticModel - metadata is preserved!\nfiltered_table = filtered.as_table()\n\n# Dimensions and measures are still available (preserved from original semantic table)\nresult = f\"Type: {type(filtered_table).__name__}\\nDimensions: {filtered_table.dimensions}\\nMeasures: {filtered_table.measures}\"\n```\n\n<regularoutput code-block=\"query_as_table_filter_preserved\"></regularoutput>\n\nNotice how the dimensions and measures are preserved, unlike the aggregation case above where they were empty.\n\n**Key points:**\n- **Operations that preserve metadata**: `filter()`, `order_by()`, `limit()`, `unnest()` \u2014 calling `as_table()` restores full semantic capabilities with original dimensions/measures\n- **Operations that clear metadata**: `aggregate()`, `mutate()` \u2014 calling `as_table()` returns a `SemanticModel` with empty dimensions/measures (columns are materialized)\n- Use `as_table()` when you need to continue semantic operations on intermediate results\n\n## Next Steps\n\n- Learn about [Building Semantic Tables](/building/semantic-tables) to define dimensions and measures\n- Explore [Composing Models](/building/compose) for multi-table queries\n- Try [Advanced Patterns](/advanced/percentage-total) for complex analytics\n",
  "queries": {
    "setup_table": {
      "code": "import ibis\nfrom ibis import _\nfrom boring_semantic_layer import to_semantic_table\n\n# Create Ibis table\nflights_tbl = ibis.memtable({\n    \"origin\": [\"NYC\", \"LAX\", \"NYC\", \"SFO\", \"LAX\", \"NYC\", \"SFO\", \"LAX\", \"NYC\"],\n    \"carrier\": [\"AA\", \"UA\", \"AA\", \"UA\", \"AA\", \"UA\", \"AA\", \"UA\", \"AA\"],\n    \"distance\": [2789, 2789, 2902, 2902, 347, 2789, 347, 347, 2789],\n    \"duration\": [330, 330, 360, 360, 65, 330, 65, 65, 330],\n})\n\n# Create semantic table\nflights_st = (\n    to_semantic_table(flights_tbl, name=\"flights\")\n    .with_dimensions(\n        origin=lambda t: t.origin,\n        carrier=lambda t: t.carrier,\n    )\n    .with_measures(\n        flight_count=lambda t: t.count(),\n        total_distance=lambda t: t.distance.sum(),\n        avg_duration=lambda t: t.duration.mean(),\n    )\n)",
      "sql": "SELECT\n  *\nFROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\"",
      "table": {
        "columns": [
          "origin",
          "carrier",
          "distance",
          "duration"
        ],
        "data": [
          [
            "NYC",
            "AA",
            2789,
            330
          ],
          [
            "LAX",
            "UA",
            2789,
            330
          ],
          [
            "NYC",
            "AA",
            2902,
            360
          ],
          [
            "SFO",
            "UA",
            2902,
            360
          ],
          [
            "LAX",
            "AA",
            347,
            65
          ],
          [
            "NYC",
            "UA",
            2789,
            330
          ],
          [
            "SFO",
            "AA",
            347,
            65
          ],
          [
            "LAX",
            "UA",
            347,
            65
          ],
          [
            "NYC",
            "AA",
            2789,
            330
          ]
        ]
      }
    },
    "query_single_dimension": {
      "code": "# Group by one dimension\nresult = flights_st.group_by(\"origin\").aggregate(\"flight_count\")",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count"
        ],
        "data": [
          [
            "NYC",
            4
          ],
          [
            "SFO",
            2
          ],
          [
            "LAX",
            3
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-3eaf3be1485583778a074de1413ab582"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "flight_count",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "y": {
              "field": "flight_count",
              "type": "quantitative"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-3eaf3be1485583778a074de1413ab582": [
              {
                "origin": "SFO",
                "flight_count": 2
              },
              {
                "origin": "LAX",
                "flight_count": 3
              },
              {
                "origin": "NYC",
                "flight_count": 4
              }
            ]
          }
        }
      }
    },
    "query_multiple_dimensions": {
      "code": "# Group by multiple dimensions\nresult = flights_st.group_by(\"origin\", \"carrier\").aggregate(\"flight_count\")",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    \"t1\".\"carrier\",\n    COUNT(*) AS \"flight_count\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1,\n    2\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "carrier",
          "flight_count"
        ],
        "data": [
          [
            "SFO",
            "AA",
            1
          ],
          [
            "LAX",
            "AA",
            1
          ],
          [
            "NYC",
            "UA",
            1
          ],
          [
            "NYC",
            "AA",
            3
          ],
          [
            "LAX",
            "UA",
            2
          ],
          [
            "SFO",
            "UA",
            1
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-e0473fbef9987ad2bf8b9def574f9445"
          },
          "mark": {
            "type": "rect"
          },
          "encoding": {
            "color": {
              "field": "flight_count",
              "type": "quantitative"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "carrier",
                "type": "nominal"
              },
              {
                "field": "flight_count",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "y": {
              "field": "carrier",
              "sort": null,
              "type": "ordinal"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-e0473fbef9987ad2bf8b9def574f9445": [
              {
                "origin": "LAX",
                "carrier": "AA",
                "flight_count": 1
              },
              {
                "origin": "NYC",
                "carrier": "UA",
                "flight_count": 1
              },
              {
                "origin": "SFO",
                "carrier": "UA",
                "flight_count": 1
              },
              {
                "origin": "SFO",
                "carrier": "AA",
                "flight_count": 1
              },
              {
                "origin": "NYC",
                "carrier": "AA",
                "flight_count": 3
              },
              {
                "origin": "LAX",
                "carrier": "UA",
                "flight_count": 2
              }
            ]
          }
        }
      }
    },
    "query_no_grouping": {
      "code": "# Aggregate entire dataset without grouping\nresult = flights_st.group_by().aggregate(\"flight_count\", \"total_distance\", \"avg_duration\")",
      "sql": "SELECT\n  COUNT(*) AS \"flight_count\",\n  SUM(\"t0\".\"distance\") AS \"total_distance\",\n  AVG(\"t0\".\"duration\") AS \"avg_duration\"\nFROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"",
      "table": {
        "columns": [
          "flight_count",
          "total_distance",
          "avg_duration"
        ],
        "data": [
          [
            9.0,
            18001.0,
            248.33333333333334
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-8a83363d11adffb1b866841c56e09dfc"
          },
          "mark": {
            "type": "text"
          },
          "encoding": {
            "text": {
              "value": "Complex query - consider custom visualization"
            }
          },
          "height": 400,
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-8a83363d11adffb1b866841c56e09dfc": [
              {
                "flight_count": 9,
                "total_distance": 18001,
                "avg_duration": 248.33333333333334
              }
            ]
          }
        }
      }
    },
    "query_predefined_measures": {
      "code": "# Use measures defined in with_measures()\nresult = flights_st.group_by(\"origin\").aggregate(\"flight_count\", \"avg_duration\")",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    AVG(\"t1\".\"duration\") AS \"avg_duration\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "avg_duration"
        ],
        "data": [
          [
            "LAX",
            3,
            153.33333333333334
          ],
          [
            "NYC",
            4,
            337.5
          ],
          [
            "SFO",
            2,
            212.5
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-d0d39a81e22e7ec454a6eaad6417faac"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "avg_duration"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-d0d39a81e22e7ec454a6eaad6417faac": [
              {
                "origin": "SFO",
                "flight_count": 2,
                "avg_duration": 212.5
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "avg_duration": 153.33333333333334
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "avg_duration": 337.5
              }
            ]
          }
        }
      }
    },
    "query_onthefly_measures": {
      "code": "# Mix predefined and computed measures\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",              # Pre-defined measure\n        \"avg_duration\",               # Pre-defined measure\n        total_miles=lambda t: t.distance.sum(),  # Computed on-the-fly\n        max_distance=lambda t: t.flight_count + 2  # You can reference other measures as well\n    )\n)",
      "sql": "SELECT\n  \"t2\".\"origin\",\n  \"t2\".\"flight_count\",\n  \"t2\".\"avg_duration\",\n  \"t2\".\"total_miles\",\n  \"t2\".\"flight_count\" + 2 AS \"max_distance\"\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    AVG(\"t1\".\"duration\") AS \"avg_duration\",\n    SUM(\"t1\".\"distance\") AS \"total_miles\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "avg_duration",
          "total_miles",
          "max_distance"
        ],
        "data": [
          [
            "LAX",
            3,
            153.33333333333334,
            3483,
            5
          ],
          [
            "NYC",
            4,
            337.5,
            11269,
            6
          ],
          [
            "SFO",
            2,
            212.5,
            3249,
            4
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-22866678e8acf83c7eb8555595e76d9b"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "avg_duration",
                "total_miles",
                "max_distance"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-22866678e8acf83c7eb8555595e76d9b": [
              {
                "origin": "NYC",
                "flight_count": 4,
                "avg_duration": 337.5,
                "total_miles": 11269,
                "max_distance": 6
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "avg_duration": 153.33333333333334,
                "total_miles": 3483,
                "max_distance": 5
              },
              {
                "origin": "SFO",
                "flight_count": 2,
                "avg_duration": 212.5,
                "total_miles": 3249,
                "max_distance": 4
              }
            ]
          }
        }
      }
    },
    "query_table_columns": {
      "code": "# Reference table columns directly in aggregate()\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",                           # Pre-defined measure\n        total_distance=lambda t: t.distance.sum(),  # Table column 'distance'\n        avg_duration=lambda t: t.duration.mean(),   # Table column 'duration'\n        distance_in_km=lambda t: (t.distance * 1.60934).sum()  # Transform then aggregate\n    )\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    SUM(\"t1\".\"distance\") AS \"total_distance\",\n    AVG(\"t1\".\"duration\") AS \"avg_duration\",\n    SUM(\"t1\".\"distance\" * 1.60934) AS \"distance_in_km\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "total_distance",
          "avg_duration",
          "distance_in_km"
        ],
        "data": [
          [
            "SFO",
            2,
            3249,
            212.5,
            5228.74566
          ],
          [
            "LAX",
            3,
            3483,
            153.33333333333334,
            5605.33122
          ],
          [
            "NYC",
            4,
            11269,
            337.5,
            18135.65246
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-bbaf15a58b34f0216cfd683fe873eddb"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "total_distance",
                "avg_duration",
                "distance_in_km"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-bbaf15a58b34f0216cfd683fe873eddb": [
              {
                "origin": "LAX",
                "flight_count": 3,
                "total_distance": 3483,
                "avg_duration": 153.33333333333334,
                "distance_in_km": 5605.33122
              },
              {
                "origin": "SFO",
                "flight_count": 2,
                "total_distance": 3249,
                "avg_duration": 212.5,
                "distance_in_km": 5228.74566
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "total_distance": 11269,
                "avg_duration": 337.5,
                "distance_in_km": 18135.65246
              }
            ]
          }
        }
      }
    },
    "query_filter_order_limit": {
      "code": "from ibis import _\n\n# Filter data, sort, and limit results\nresult = (\n    flights_st\n    .filter(lambda t: t.origin.isin([\"NYC\", \"LAX\"]))  # Filter origins\n    .filter(_.distance > 500)                          # Filter distance using _ syntax\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"avg_duration\")        # Aggregate both measures\n    .order_by(ibis.desc(\"flight_count\"))              # Sort by flight_count descending\n    .limit(5)                                          # Top 5 results\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    AVG(\"t1\".\"duration\") AS \"avg_duration\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n    WHERE\n      \"t0\".\"origin\" IN ('NYC', 'LAX') AND \"t0\".\"distance\" > 500\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"\nORDER BY\n  \"t2\".\"flight_count\" DESC\nLIMIT 5",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "avg_duration"
        ],
        "data": [
          [
            "NYC",
            4,
            337.5
          ],
          [
            "LAX",
            1,
            330.0
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-972acb40c7a2674bfa181e6b909100f3"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "avg_duration"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-972acb40c7a2674bfa181e6b909100f3": [
              {
                "origin": "LAX",
                "flight_count": 1,
                "avg_duration": 330.0
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "avg_duration": 337.5
              }
            ]
          }
        }
      }
    },
    "query_basic_nest": {
      "code": "from ibis import _\n\n# Nest flight details within each origin\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",\n        \"total_distance\",\n        # Create nested array of flight details\n        nest={\"flights\": lambda t: t.group_by([\"carrier\", \"distance\"])}\n    )\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    SUM(\"t1\".\"distance\") AS \"total_distance\",\n    ARRAY_AGG({'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"}) FILTER(WHERE\n      {'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"} IS NOT NULL) AS \"flights\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "total_distance",
          "flights"
        ],
        "data": [
          [
            "LAX",
            3,
            3483,
            [
              {
                "carrier": "UA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 347
              },
              {
                "carrier": "UA",
                "distance": 347
              }
            ]
          ],
          [
            "SFO",
            2,
            3249,
            [
              {
                "carrier": "UA",
                "distance": 2902
              },
              {
                "carrier": "AA",
                "distance": 347
              }
            ]
          ],
          [
            "NYC",
            4,
            11269,
            [
              {
                "carrier": "AA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 2902
              },
              {
                "carrier": "UA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 2789
              }
            ]
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-84104b475a7c24825f52e7213f8ab180"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "total_distance",
                "flights"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-84104b475a7c24825f52e7213f8ab180": [
              {
                "origin": "SFO",
                "flight_count": 2,
                "total_distance": 3249,
                "flights": [
                  {
                    "carrier": "UA",
                    "distance": 2902
                  },
                  {
                    "carrier": "AA",
                    "distance": 347
                  }
                ]
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "total_distance": 11269,
                "flights": [
                  {
                    "carrier": "AA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 2902
                  },
                  {
                    "carrier": "UA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 2789
                  }
                ]
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "total_distance": 3483,
                "flights": [
                  {
                    "carrier": "UA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 347
                  },
                  {
                    "carrier": "UA",
                    "distance": 347
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "query_nest_select": {
      "code": "# Nest specific columns\nresult = (\n    flights_st\n    .group_by(\"carrier\")\n    .aggregate(\n        \"flight_count\",\n        nest={\"routes\": lambda t: t.select(\"origin\", \"distance\", \"duration\")}\n    )\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"carrier\",\n    COUNT(*) AS \"flight_count\",\n    ARRAY_AGG(\n      {'origin': \"t1\".\"origin\", 'distance': \"t1\".\"distance\", 'duration': \"t1\".\"duration\"}\n    ) FILTER(WHERE\n      {'origin': \"t1\".\"origin\", 'distance': \"t1\".\"distance\", 'duration': \"t1\".\"duration\"} IS NOT NULL) AS \"routes\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "carrier",
          "flight_count",
          "routes"
        ],
        "data": [
          [
            "UA",
            4,
            [
              {
                "origin": "LAX",
                "distance": 2789,
                "duration": 330
              },
              {
                "origin": "SFO",
                "distance": 2902,
                "duration": 360
              },
              {
                "origin": "NYC",
                "distance": 2789,
                "duration": 330
              },
              {
                "origin": "LAX",
                "distance": 347,
                "duration": 65
              }
            ]
          ],
          [
            "AA",
            5,
            [
              {
                "origin": "NYC",
                "distance": 2789,
                "duration": 330
              },
              {
                "origin": "NYC",
                "distance": 2902,
                "duration": 360
              },
              {
                "origin": "LAX",
                "distance": 347,
                "duration": 65
              },
              {
                "origin": "SFO",
                "distance": 347,
                "duration": 65
              },
              {
                "origin": "NYC",
                "distance": 2789,
                "duration": 330
              }
            ]
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-82d74a794a4a364fb1e9e683490ca229"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "carrier",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "carrier",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "routes"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-82d74a794a4a364fb1e9e683490ca229": [
              {
                "carrier": "UA",
                "flight_count": 4,
                "routes": [
                  {
                    "origin": "LAX",
                    "distance": 2789,
                    "duration": 330
                  },
                  {
                    "origin": "SFO",
                    "distance": 2902,
                    "duration": 360
                  },
                  {
                    "origin": "NYC",
                    "distance": 2789,
                    "duration": 330
                  },
                  {
                    "origin": "LAX",
                    "distance": 347,
                    "duration": 65
                  }
                ]
              },
              {
                "carrier": "AA",
                "flight_count": 5,
                "routes": [
                  {
                    "origin": "NYC",
                    "distance": 2789,
                    "duration": 330
                  },
                  {
                    "origin": "NYC",
                    "distance": 2902,
                    "duration": 360
                  },
                  {
                    "origin": "LAX",
                    "distance": 347,
                    "duration": 65
                  },
                  {
                    "origin": "SFO",
                    "distance": 347,
                    "duration": 65
                  },
                  {
                    "origin": "NYC",
                    "distance": 2789,
                    "duration": 330
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "query_nest_step1": {
      "code": "from ibis import _\n\n# Create nested data structure\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\n        \"flight_count\",\n        nest={\"flights\": lambda t: t.group_by([\"carrier\", \"distance\"])}\n    )\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    ARRAY_AGG({'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"}) FILTER(WHERE\n      {'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"} IS NOT NULL) AS \"flights\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "flights"
        ],
        "data": [
          [
            "NYC",
            4,
            [
              {
                "carrier": "AA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 2902
              },
              {
                "carrier": "UA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 2789
              }
            ]
          ],
          [
            "SFO",
            2,
            [
              {
                "carrier": "UA",
                "distance": 2902
              },
              {
                "carrier": "AA",
                "distance": 347
              }
            ]
          ],
          [
            "LAX",
            3,
            [
              {
                "carrier": "UA",
                "distance": 2789
              },
              {
                "carrier": "AA",
                "distance": 347
              },
              {
                "carrier": "UA",
                "distance": 347
              }
            ]
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-22fff5453736929a356005cc8fc72142"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "flights"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-22fff5453736929a356005cc8fc72142": [
              {
                "origin": "SFO",
                "flight_count": 2,
                "flights": [
                  {
                    "carrier": "UA",
                    "distance": 2902
                  },
                  {
                    "carrier": "AA",
                    "distance": 347
                  }
                ]
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "flights": [
                  {
                    "carrier": "AA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 2902
                  },
                  {
                    "carrier": "UA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 2789
                  }
                ]
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "flights": [
                  {
                    "carrier": "UA",
                    "distance": 2789
                  },
                  {
                    "carrier": "AA",
                    "distance": 347
                  },
                  {
                    "carrier": "UA",
                    "distance": 347
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "query_nest_step2": {
      "code": "from ibis import _\n\n# Re-grouping automatically unnests the 'flights' array\nresult = (\n    result\n    .group_by(\"origin\")\n    .aggregate(\n        total_flights=lambda t: t.flight_count.sum(),\n        # Access unnested fields from the flights array\n        unique_carriers=lambda t: t.flights.carrier.nunique(),\n        avg_distance=lambda t: t.flights.distance.mean()\n    )\n)",
      "sql": "WITH \"t3\" AS (\n  SELECT\n    *\n  FROM (\n    SELECT\n      \"t1\".\"origin\",\n      COUNT(*) AS \"flight_count\",\n      ARRAY_AGG({'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"}) FILTER(WHERE\n        {'carrier': \"t1\".\"carrier\", 'distance': \"t1\".\"distance\"} IS NOT NULL) AS \"flights\"\n    FROM (\n      SELECT\n        *\n      FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n    ) AS \"t1\"\n    GROUP BY\n      1\n  ) AS \"t2\"\n)\nSELECT\n  *\nFROM (\n  SELECT\n    \"t7\".\"origin\",\n    \"t7\".\"total_flights\",\n    \"t9\".\"unique_carriers\",\n    \"t9\".\"avg_distance\"\n  FROM (\n    SELECT\n      \"t4\".\"origin\",\n      SUM(\"t4\".\"flight_count\") AS \"total_flights\"\n    FROM \"t3\" AS \"t4\"\n    GROUP BY\n      1\n  ) AS \"t7\"\n  LEFT OUTER JOIN (\n    SELECT\n      \"t5\".\"origin\",\n      COUNT(DISTINCT \"t5\".\"flights\".\"carrier\") AS \"unique_carriers\",\n      AVG(\"t5\".\"flights\".\"distance\") AS \"avg_distance\"\n    FROM (\n      SELECT\n        \"t4\".*\n        REPLACE (\"ibis_table_unnest_column_gc7rwvhw6jaufdwzy2lvac3cee\" AS \"flights\")\n      FROM \"t3\" AS \"t4\"\n      CROSS JOIN UNNEST(\"t4\".\"flights\") AS \"ibis_table_unnest_ixuk367itzaj3jmbtxiysyvlsq\"(\"ibis_table_unnest_column_gc7rwvhw6jaufdwzy2lvac3cee\")\n    ) AS \"t5\"\n    GROUP BY\n      1\n  ) AS \"t9\"\n    ON \"t7\".\"origin\" = \"t9\".\"origin\"\n) AS \"t10\"",
      "table": {
        "columns": [
          "origin",
          "total_flights",
          "unique_carriers",
          "avg_distance"
        ],
        "data": [
          [
            "SFO",
            2,
            2,
            1624.5
          ],
          [
            "NYC",
            4,
            2,
            2817.25
          ],
          [
            "LAX",
            3,
            2,
            1161.0
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-d782e4c945aacacb2b473b1f0b3c5334"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "total_flights",
                "unique_carriers",
                "avg_distance"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-d782e4c945aacacb2b473b1f0b3c5334": [
              {
                "origin": "NYC",
                "total_flights": 4,
                "unique_carriers": 2,
                "avg_distance": 2817.25
              },
              {
                "origin": "LAX",
                "total_flights": 3,
                "unique_carriers": 2,
                "avg_distance": 1161.0
              },
              {
                "origin": "SFO",
                "total_flights": 2,
                "unique_carriers": 2,
                "avg_distance": 1624.5
              }
            ]
          }
        }
      }
    },
    "query_mutate": {
      "code": "from ibis import _\n\n# Add post-aggregation calculations\nresult = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"total_distance\")\n    .mutate(\n        avg_distance_per_flight=lambda t: t.total_distance / t.flight_count,\n        flight_category=lambda t: ibis.case()\n            .when(t.flight_count >= 3, \"high\")\n            .when(t.flight_count >= 2, \"medium\")\n            .else_(\"low\")\n            .end()\n    )\n)",
      "sql": "SELECT\n  \"t2\".\"origin\",\n  \"t2\".\"flight_count\",\n  \"t2\".\"total_distance\",\n  \"t2\".\"total_distance\" / \"t2\".\"flight_count\" AS \"avg_distance_per_flight\",\n  CASE\n    WHEN \"t2\".\"flight_count\" >= 3\n    THEN 'high'\n    WHEN \"t2\".\"flight_count\" >= 2\n    THEN 'medium'\n    ELSE 'low'\n  END AS \"flight_category\"\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    SUM(\"t1\".\"distance\") AS \"total_distance\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "total_distance",
          "avg_distance_per_flight",
          "flight_category"
        ],
        "data": [
          [
            "LAX",
            3,
            3483,
            1161.0,
            "high"
          ],
          [
            "SFO",
            2,
            3249,
            1624.5,
            "medium"
          ],
          [
            "NYC",
            4,
            11269,
            2817.25,
            "high"
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-f9d66f0b40b1ffd50f6a1cf836bc83a9"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "total_distance"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-f9d66f0b40b1ffd50f6a1cf836bc83a9": [
              {
                "origin": "SFO",
                "flight_count": 2,
                "total_distance": 3249
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "total_distance": 3483
              },
              {
                "origin": "NYC",
                "flight_count": 4,
                "total_distance": 11269
              }
            ]
          }
        }
      }
    },
    "query_window_example": {
      "code": "from ibis import _\n\n# First aggregate to daily level\ndaily_flights = (\n    flights_st\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"total_distance\")\n    .order_by(\"origin\")\n)\n\n# Then apply window function for cumulative distance\nwindow_spec = ibis.window(order_by=\"origin\")\n\nresult = daily_flights.mutate(\n    cumulative_distance=_.total_distance.cumsum(),\n    flight_rank=lambda t: ibis.rank().over(ibis.window(order_by=_.flight_count.desc()))\n).limit(10)",
      "sql": "SELECT\n  \"t4\".\"origin\",\n  \"t4\".\"flight_count\",\n  \"t4\".\"total_distance\",\n  \"t4\".\"cumulative_distance\",\n  RANK() OVER (ORDER BY \"t4\".\"flight_count\" DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) - 1 AS \"flight_rank\"\nFROM (\n  SELECT\n    \"t3\".\"origin\",\n    \"t3\".\"flight_count\",\n    \"t3\".\"total_distance\",\n    SUM(\"t3\".\"total_distance\") OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS \"cumulative_distance\"\n  FROM (\n    SELECT\n      *\n    FROM (\n      SELECT\n        \"t1\".\"origin\",\n        COUNT(*) AS \"flight_count\",\n        SUM(\"t1\".\"distance\") AS \"total_distance\"\n      FROM (\n        SELECT\n          *\n        FROM \"ibis_pandas_memtable_3reqxxdd6jg7pj5r5m7bra775m\" AS \"t0\"\n      ) AS \"t1\"\n      GROUP BY\n        1\n    ) AS \"t2\"\n    ORDER BY\n      \"t2\".\"origin\" ASC\n  ) AS \"t3\"\n) AS \"t4\"\nLIMIT 10",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "total_distance",
          "cumulative_distance",
          "flight_rank"
        ],
        "data": [
          [
            "NYC",
            4,
            11269,
            14752,
            0
          ],
          [
            "LAX",
            3,
            3483,
            3483,
            1
          ],
          [
            "SFO",
            2,
            3249,
            18001,
            2
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-9720646ccab33e2b86467c8a8982e12b"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "total_distance"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-9720646ccab33e2b86467c8a8982e12b": [
              {
                "origin": "NYC",
                "flight_count": 4,
                "total_distance": 11269
              },
              {
                "origin": "SFO",
                "flight_count": 2,
                "total_distance": 3249
              },
              {
                "origin": "LAX",
                "flight_count": 3,
                "total_distance": 3483
              }
            ]
          }
        }
      }
    },
    "query_as_table_problem": {
      "output": "Type: SemanticAggregate\nError: 'Table' object has no attribute 'dimensions'"
    },
    "query_as_table_after_aggregate": {
      "output": "Type: SemanticModel\nDimensions: ()\nMeasures: ()"
    },
    "query_as_table_filter_preserved": {
      "output": "Type: SemanticModel\nDimensions: ('origin', 'carrier')\nMeasures: ('flight_count', 'total_distance', 'avg_duration')"
    }
  },
  "files": {}
}