{
  "markdown": "# Model Context Protocol (MCP) Integration\n\nBSL includes built-in support for the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/python-sdk), allowing you to expose your semantic models to Large Language Models like Claude.\n\n<note type=\"info\">\n**Pro tip:** Use [descriptions in dimensions and measures](/building/semantic-tables#adding-descriptions) to make your models more AI-friendly. Descriptions help provide context to LLMs, enabling them to understand what each field represents and when to use them.\n</note>\n\n## Installation\n\nTo use MCP functionality, install BSL with the `fastmcp` extra:\n\n```bash\npip install 'boring-semantic-layer[fastmcp]'\n```\n\n## Setting up an MCP Server\n\nCreate an MCP server script that exposes your semantic models:\n\n```python\nimport ibis\nfrom boring_semantic_layer.semantic_api import to_semantic_table\nfrom boring_semantic_layer.api.mcp import MCPSemanticModel\n\n# Create synthetic flights data\nflights_data = ibis.memtable({\n    \"flight_id\": list(range(1, 101)),\n    \"origin\": [\"JFK\", \"LAX\", \"ORD\", \"ATL\", \"DFW\"] * 20,\n    \"dest\": [\"LAX\", \"JFK\", \"DFW\", \"ORD\", \"ATL\"] * 20,\n    \"carrier\": [\"AA\", \"UA\", \"DL\", \"WN\", \"B6\"] * 20,\n    \"distance\": [2475, 2475, 801, 606, 732] * 20,\n})\n\n# Define your semantic table with descriptions\nflights = (\n    to_semantic_table(flights_data, name=\"flights\")\n    .with_dimensions(\n        origin={\n            \"expr\": lambda t: t.origin,\n            \"description\": \"Origin airport code where the flight departed from\"\n        },\n        destination={\n            \"expr\": lambda t: t.dest,\n            \"description\": \"Destination airport code where the flight arrived\"\n        },\n        carrier={\n            \"expr\": lambda t: t.carrier,\n            \"description\": \"Airline carrier code (e.g., AA, UA, DL)\"\n        },\n    )\n    .with_measures(\n        total_flights={\n            \"expr\": lambda t: t.count(),\n            \"description\": \"Total number of flights\"\n        },\n        avg_distance={\n            \"expr\": lambda t: t.distance.mean(),\n            \"description\": \"Average flight distance in miles\"\n        },\n    )\n)\n\n# Create the MCP server\nmcp_server = MCPSemanticModel(\n    models={\"flights\": flights},\n    name=\"Flight Data Server\"\n)\n\nif __name__ == \"__main__\":\n    mcp_server.run(transport=\"stdio\")\n```\n\nSave this as `example_mcp.py` in your project directory.\n\n## Configuring Claude Desktop\n\nTo use your MCP server with Claude Desktop, add it to your configuration file.\n\n**Configuration file location:**\n- **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n**Example configuration:**\n\n```json\n{\n  \"mcpServers\": {\n    \"flight_sm\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/your/project/\",\n        \"run\",\n        \"example_mcp.py\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/path/to/your/project/` with the actual path to your project directory.\n\n<note type=\"info\">\nThis example uses [uv](https://docs.astral.sh/uv/) to run the MCP server. You can also use `python` directly if you have BSL installed in your environment:\n\n```json\n{\n  \"mcpServers\": {\n    \"flight_sm\": {\n      \"command\": \"python\",\n      \"args\": [\"/path/to/your/project/example_mcp.py\"]\n    }\n  }\n}\n```\n</note>\n\nAfter updating the configuration:\n1. Restart Claude Desktop\n2. Look for the MCP server indicator in the Claude Desktop interface\n3. You should see \"flight_sm\" listed as an available server\n\n## Available MCP Tools\n\nOnce configured, Claude will have access to these tools for interacting with your semantic models:\n\n### list_models\n\nList all available semantic model names in the MCP server.\n\n**Example usage in Claude:**\n> \"What models are available?\"\n\n**Returns:** Array of model names (e.g., `[\"flights\", \"carriers\"]`)\n\n### get_model\n\nGet detailed information about a specific model including its dimensions, measures, and descriptions.\n\n**Parameters:**\n- `model_name` (str): Name of the model to inspect\n\n**Example usage in Claude:**\n> \"Show me the details of the flights model\"\n\n**Returns:** Model schema including:\n- Model name and description\n- List of dimensions with their descriptions\n- List of measures with their descriptions\n- Available joins (if any)\n\n### get_time_range\n\nGet the available time range for time-series data in a model.\n\n**Parameters:**\n- `model_name` (str): Name of the model\n- `time_dimension` (str): Name of the time dimension\n\n**Example usage in Claude:**\n> \"What's the time range available in the flights model?\"\n\n**Returns:** Dictionary with `min_time` and `max_time` values\n\n### query_model\n\nExecute queries against a semantic model with dimensions, measures, filters, and optional chart specifications.\n\n**Parameters:**\n- `model_name` (str): Name of the model to query\n- `dimensions` (list[str]): List of dimension names to group by\n- `measures` (list[str]): List of measure names to aggregate\n- `filters` (list[str], optional): List of filter expressions (e.g., `[\"origin == 'JFK'\"]`)\n- `limit` (int, optional): Maximum number of rows to return\n- `order_by` (list[str], optional): List of columns to sort by\n- `chart_spec` (dict, optional): Vega-Lite chart specification\n\n**Example usage in Claude:**\n> \"Show me the top 10 origins by flight count\"\n> \"Create a bar chart of average distance by carrier\"\n\n**Returns:**\n- When `chart_spec` is provided: `{\"records\": [...], \"chart\": {...}}`\n- When `chart_spec` is not provided: `{\"records\": [...]}`\n\n### Example Interactions\n\nHere are some example questions you can ask Claude when the MCP server is configured:\n\n**Data Exploration:**\n- \"What models are available in the flight data server?\"\n- \"Show me all dimensions and measures in the flights model\"\n- \"What is the time range covered by the flights data?\"\n\n**Basic Queries:**\n- \"How many flights departed from JFK?\"\n- \"Show me the top 5 destinations by flight count\"\n- \"What's the average flight distance for each carrier?\"\n\n**Filtered Queries:**\n- \"Show me flights from California airports (starting with 'S')\"\n- \"What carriers have an average distance over 1000 miles?\"\n- \"List the top 10 busiest routes\"\n\n**Visualizations:**\n- \"Create a bar chart showing flights by origin airport\"\n- \"Make a line chart of flights over time\"\n- \"Show me a heatmap of routes between origins and destinations\"\n\n## Best Practices\n\n### 1. Add Descriptions to All Fields\n\nDescriptions are crucial for LLMs to understand your data model:\n\n```python\nflights = (\n    to_semantic_table(flights_tbl, name=\"flights\")\n    .with_dimensions(\n        origin={\n            \"expr\": lambda t: t.origin,\n            \"description\": \"Origin airport code (3-letter IATA code)\"\n        }\n    )\n    .with_measures(\n        total_flights={\n            \"expr\": lambda t: t.count(),\n            \"description\": \"Total number of flights in the dataset\"\n        }\n    )\n)\n```\n\n### 2. Use Descriptive Model Names\n\nChoose clear, descriptive names for your models:\n\n```python\n# Good\nmcp_server = MCPSemanticModel(\n    models={\"flights\": flights, \"carriers\": carriers},\n    name=\"Aviation Analytics Server\"\n)\n\n# Less clear\nmcp_server = MCPSemanticModel(\n    models={\"f\": flights, \"c\": carriers},\n    name=\"Server\"\n)\n```\n\n### 3. Structure Your Data Logically\n\nOrganize related dimensions and measures together, and use joins to connect related models:\n\n```python\n# Flights model focuses on flight operations\nflights = (\n    to_semantic_table(flights_tbl, name=\"flights\")\n    .with_dimensions(origin=..., destination=..., date=...)\n    .with_measures(flight_count=..., avg_delay=...)\n)\n\n# Carriers model focuses on airline information\ncarriers = (\n    to_semantic_table(carriers_tbl, name=\"carriers\")\n    .with_dimensions(code=..., name=..., country=...)\n    .with_measures(carrier_count=...)\n)\n\n# Connect them with joins\nflights_with_carriers = flights.join_one(\n    carriers,\n    left_on=\"carrier\",\n    right_on=\"code\"\n)\n```\n\n## Troubleshooting\n\n### Server Not Appearing in Claude Desktop\n\n1. Check the configuration file path is correct\n2. Verify JSON syntax in `claude_desktop_config.json`\n3. Ensure BSL is installed with MCP support: `pip install 'boring-semantic-layer[fastmcp]'`\n4. Restart Claude Desktop completely\n5. Check Claude Desktop logs for error messages\n\n### Import Errors\n\nIf you see import errors when the server starts:\n\n```bash\n# Ensure all dependencies are installed\npip install 'boring-semantic-layer[fastmcp]'\n\n# Or install specific dependencies\npip install fastmcp ibis-framework\n```\n\n### Path Issues\n\nMake sure file paths in your configuration are absolute paths, not relative:\n\n```json\n{\n  \"mcpServers\": {\n    \"flight_sm\": {\n      \"command\": \"python\",\n      \"args\": [\"/Users/username/projects/my-project/example_mcp.py\"]\n    }\n  }\n}\n```\n\n## Next Steps\n\n- Learn about [YAML Configuration](/building/yaml) for managing multiple models\n- Explore [Query Methods](/querying/methods) to understand what queries LLMs can perform\n- See [Charting](/querying/charting) for visualization capabilities\n- Review the [full API Reference](/reference) for advanced features\n",
  "queries": {},
  "files": {}
}