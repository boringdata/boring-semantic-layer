{
  "markdown": "# API Reference\n\nComplete API documentation for the Boring Semantic Layer.\n\n## Table Creation & Configuration\n\nMethods for creating and configuring semantic tables.\n\n### to_semantic_table()\n\n```python\nto_semantic_table(\n    table: ibis.Table,\n    name: str,\n    description: str = None\n) -> SemanticTable\n```\n\nCreate a semantic table from an Ibis table. This is the primary entry point for building semantic models.\n\n**Parameters:**\n- `table` - Ibis table to build the model from\n- `name` - Unique identifier for the semantic table\n- `description` - Optional description of the semantic table\n\n**Example:**\n```python\nimport ibis\nfrom boring_semantic_layer import to_semantic_table\n\nflights = ibis.read_parquet(\"flights.parquet\")\nflights_st = to_semantic_table(flights, \"flights\")\n```\n\n### with_dimensions()\n\n```python\nwith_dimensions(\n    **dimensions: Callable | Dimension\n) -> SemanticTable\n```\n\nDefine dimensions for grouping and analysis. Dimensions are attributes that categorize data.\n\n**Example:**\n```python\nflights_st = flights_st.with_dimensions(\n    origin=lambda t: t.origin,\n    dest=lambda t: t.dest,\n    carrier=lambda t: t.carrier\n)\n```\n\n### with_measures()\n\n```python\nwith_measures(\n    **measures: Callable | Measure\n) -> SemanticTable\n```\n\nDefine aggregations and calculations. Measures are numeric values that can be aggregated.\n\n**Example:**\n```python\nflights_st = flights_st.with_measures(\n    flight_count=lambda t: t.count(),\n    avg_delay=lambda t: t.arr_delay.mean(),\n    total_distance=lambda t: t.distance.sum()\n)\n```\n\n### from_yaml()\n\n```python\nfrom_yaml(\n    yaml_path: str,\n    connection: ibis.Connection = None\n) -> dict[str, SemanticTable]\n```\n\nLoad semantic models from a YAML configuration file. Returns a dictionary of semantic tables.\n\n**Parameters:**\n- `yaml_path` - Path to YAML configuration file\n- `connection` - Optional Ibis connection for database tables\n\n**Example:**\n```python\nfrom boring_semantic_layer.yaml import from_yaml\n\nmodels = from_yaml(\"models.yaml\")\nflights_st = models[\"flights\"]\n```\n\n### Dimension Class\n\n```python\nDimension(\n    expr: Callable,\n    description: str = None\n)\n```\n\nSelf-documenting dimension with description. Use for better API documentation.\n\n**Example:**\n```python\nfrom boring_semantic_layer import Dimension\n\nflights_st = flights_st.with_dimensions(\n    origin=Dimension(\n        expr=lambda t: t.origin,\n        description=\"Airport code where the flight departed from\"\n    )\n)\n```\n\n### Measure Class\n\n```python\nMeasure(\n    expr: Callable,\n    description: str = None\n)\n```\n\nSelf-documenting measure with description. Use for better API documentation.\n\n**Example:**\n```python\nfrom boring_semantic_layer import Measure\n\nflights_st = flights_st.with_measures(\n    avg_delay=Measure(\n        expr=lambda t: t.arr_delay.mean(),\n        description=\"Average arrival delay in minutes\"\n    )\n)\n```\n\n### all()\n\n```python\nst.all()\n```\n\nReference the entire dataset within measure definitions. Primarily used for percentage-of-total calculations.\n\n**Example:**\n```python\nflights_st = to_semantic_table(data, \"flights\").with_measures(\n    flight_count=lambda t: t.count(),\n    pct_of_total=lambda t: (\n        t.count() / t.all().count() * 100\n    )\n)\n```\n\n## Join Methods\n\nMethods for composing semantic tables through joins.\n\n### join_many()\n\n```python\njoin_many(\n    other: SemanticTable,\n    on: Callable,\n    name: str = None\n) -> SemanticTable\n```\n\nOne-to-many relationship join (LEFT JOIN). Use when the left table can match multiple rows in the right table.\n\n**Parameters:**\n- `other` - The semantic table to join with\n- `on` - Lambda function defining the join condition\n- `name` - Optional name for the joined table reference\n\n**Example:**\n```python\nflights_st = flights_st.join_many(\n    carriers_st,\n    on=lambda l, r: l.carrier == r.code,\n    name=\"carrier_info\"\n)\n```\n\n### join_one()\n\n```python\njoin_one(\n    other: SemanticTable,\n    on: Callable,\n    name: str = None\n) -> SemanticTable\n```\n\nOne-to-one relationship join (INNER JOIN). Use when each row in the left table matches exactly one row in the right table.\n\n**Example:**\n```python\nflights_st = flights_st.join_one(\n    airports_st,\n    on=lambda l, r: l.origin == r.code\n)\n```\n\n### join_cross()\n\n```python\njoin_cross(\n    other: SemanticTable,\n    name: str = None\n) -> SemanticTable\n```\n\nCross join (CARTESIAN PRODUCT). Creates all possible combinations of rows from both tables.\n\n### join()\n\n```python\njoin(\n    other: SemanticTable,\n    on: Callable,\n    how: str = \"inner\",\n    name: str = None\n) -> SemanticTable\n```\n\nCustom join with flexible join type. Supports 'inner', 'left', 'right', 'outer', and 'cross'.\n\n**Parameters:**\n- `how` - Join type: 'inner', 'left', 'right', 'outer', or 'cross'\n\n## Query Methods\n\nMethods for querying and transforming semantic tables.\n\n### group_by()\n\n```python\ngroup_by(\n    *dimensions: str\n) -> QueryBuilder\n```\n\nGroup data by one or more dimension names. Returns a query builder for chaining with aggregate().\n\n**Example:**\n```python\nresult = flights_st.group_by(\"origin\", \"carrier\").aggregate(\"flight_count\")\n```\n\n### aggregate()\n\n```python\naggregate(\n    *measures: str,\n    **kwargs\n) -> ibis.Table\n```\n\nCalculate one or more measures. Can be used standalone or after group_by().\n\n**Examples:**\n```python\n# Without grouping\ntotal = flights_st.aggregate(\"flight_count\")\n\n# With grouping\nby_origin = flights_st.group_by(\"origin\").aggregate(\"flight_count\", \"avg_delay\")\n```\n\n### filter()\n\n```python\nfilter(\n    condition: Callable\n) -> SemanticTable\n```\n\nApply conditions to filter data. Use lambda functions with Ibis expressions.\n\n**Example:**\n```python\ndelayed_flights = flights_st.filter(lambda t: t.arr_delay > 0)\n```\n\n### order_by()\n\n```python\norder_by(\n    *columns: str | ibis.Expression\n) -> ibis.Table\n```\n\nSort query results. Use `ibis.desc()` for descending order.\n\n**Example:**\n```python\nresult = flights_st.group_by(\"origin\").aggregate(\"flight_count\")\nresult = result.order_by(ibis.desc(\"flight_count\"))\n```\n\n### limit()\n\n```python\nlimit(\n    n: int\n) -> ibis.Table\n```\n\nRestrict the number of rows returned.\n\n**Example:**\n```python\ntop_10 = result.order_by(ibis.desc(\"flight_count\")).limit(10)\n```\n\n### mutate()\n\n```python\nmutate(\n    **expressions: Callable | ibis.Expression\n) -> ibis.Table\n```\n\nAdd or transform columns in aggregated results. Useful for calculations after aggregation.\n\n**Example:**\n```python\nresult = flights_st.group_by(\"month\").aggregate(\"revenue\")\nresult = result.mutate(\n    growth_rate=lambda t: (t.revenue - t.revenue.lag()) / t.revenue.lag() * 100\n)\n```\n\n### select()\n\n```python\nselect(\n    *columns: str | ibis.Expression\n) -> ibis.Table\n```\n\nSelect specific columns from the result. Often used in nesting operations.\n\n**Example:**\n```python\nresult.select(\"origin\", \"flight_count\")\n```\n\n## Nesting\n\nCreate nested data structures within aggregations.\n\n### nest Parameter\n\n```python\naggregate(\n    *measures,\n    nest={\n        \"nested_column\": lambda t: t.group_by([...]) | t.select(...)\n    }\n)\n```\n\nCreate nested arrays of structs within aggregation results. Useful for hierarchical data or subtotals.\n\n**Example:**\n```python\nresult = flights_st.group_by(\"carrier\").aggregate(\n    \"total_flights\",\n    nest={\n        \"by_month\": lambda t: t.group_by(\"month\").aggregate(\"monthly_flights\")\n    }\n)\n```\n\n## Charting\n\nGenerate visualizations from query results.\n\n### chart()\n\n```python\nchart(\n    result: ibis.Table,\n    backend: str = \"altair\",\n    spec: dict = None,\n    format: str = \"interactive\"\n) -> Chart\n```\n\nCreate visualizations from query results. Supports Altair (default) and Plotly backends.\n\n**Parameters:**\n- `result` - Query result table to visualize\n- `backend` - \"altair\" or \"plotly\"\n- `spec` - Custom Vega-Lite specification (for Altair)\n- `format` - \"interactive\", \"json\", \"png\", \"svg\"\n\n**Auto-detection:**\nBSL automatically selects appropriate chart types:\n- Single dimension + measure \u2192 Bar chart\n- Time dimension + measure \u2192 Line chart\n- Two dimensions + measure \u2192 Heatmap\n\n**Example:**\n```python\nfrom boring_semantic_layer.chart import chart\n\nresult = flights_st.group_by(\"month\").aggregate(\"flight_count\")\nchart(result, backend=\"altair\")\n```\n\n## Dimensional Indexing\n\nCreate searchable catalogs of dimension values.\n\n### index()\n\n```python\nindex(\n    dimensions: Callable | None = None,\n    by: str = None,\n    sample: int = None\n) -> ibis.Table\n```\n\nCreate a searchable catalog of unique dimension values with optional weighting and sampling.\n\n**Parameters:**\n- `dimensions` - None (all dimensions) or lambda returning list of fields\n- `by` - Measure name for weighting results\n- `sample` - Number of rows to sample (for large datasets)\n\n**Examples:**\n```python\n# Index all dimensions\nflights_st.index()\n\n# Index specific dimensions\nflights_st.index(lambda t: [t.origin, t.dest])\n\n# Weight by measure\nflights_st.index(by=\"flight_count\")\n\n# Sample large dataset\nflights_st.index(sample=10000)\n```\n\n## Other\n\n### MCP Integration\n\n#### MCPSemanticModel()\n\n```python\nMCPSemanticModel(\n    models: dict[str, SemanticTable] | str,\n    description: str = None\n)\n```\n\nCreate an MCP server to expose semantic models to LLMs like Claude. Accepts either a dictionary of models or a path to a YAML configuration file.\n\n**Available MCP Tools:**\n\nThese tools are called by Claude through the MCP interface:\n\n- `list_models()` - List all available semantic model names\n- `get_model()` - Get detailed model information (dimensions, measures, joins)\n- `get_time_range()` - Get available time range for time-series data\n- `query_model()` - Execute queries against semantic models\n\n**Example:**\n```python\nfrom boring_semantic_layer.mcp import MCPSemanticModel\n\n# From dictionary\nserver = MCPSemanticModel(\n    models={\"flights\": flights_st, \"airports\": airports_st},\n    description=\"Flight data analysis\"\n)\n\n# From YAML\nserver = MCPSemanticModel(\"config.yaml\")\n```\n\n### YAML Configuration\n\n#### YAML Structure\n\n```yaml\nmodel_name:\n  table: table_reference\n  description: \"Optional description\"\n\n  dimensions:\n    dimension_name: expression\n    # or with description\n    dimension_name:\n      expr: expression\n      description: \"Dimension description\"\n\n  measures:\n    measure_name: expression\n    # or with description\n    measure_name:\n      expr: expression\n      description: \"Measure description\"\n\n  joins:\n    join_name:\n      model: model_reference\n      on: join_condition\n      how: join_type  # left, inner, right, outer, cross\n```\n\n#### Expression Syntax\n\n- `_` - Reference to the table\n- `_.column` - Reference a column\n- `_.count()` - Aggregation functions\n- `_.column.sum()` - Column aggregations\n- `_.column.mean()` - Average\n- `_.column.min()` / `_.column.max()` - Min/Max\n\n**Example:**\n```yaml\nflights:\n  table: flights_data\n  description: \"Flight operations data\"\n\n  dimensions:\n    origin: _.origin\n    dest: _.dest\n    carrier:\n      expr: _.carrier\n      description: \"Airline carrier code\"\n\n  measures:\n    flight_count: _.count()\n    avg_delay:\n      expr: _.arr_delay.mean()\n      description: \"Average arrival delay in minutes\"\n```\n\n## Next Steps\n\n- Learn about [Semantic Tables](/building/semantic-tables)\n- Explore [Query Methods](/querying/methods)\n- See [Advanced Patterns](/advanced/percentage-total)\n",
  "queries": {},
  "files": {}
}