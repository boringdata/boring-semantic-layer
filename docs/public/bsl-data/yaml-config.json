{
  "markdown": "# YAML Configuration\n\nDefine your semantic models using YAML for better organization and maintainability.\n\n## Why YAML?\n\nYAML configuration provides several advantages:\n- **Better organization**: Keep your model definitions separate from your code\n- **Version control**: Track changes to your data model structure\n- **Collaboration**: Non-developers can review and understand the model\n- **Reusability**: Share model definitions across different projects\n\n## Expression Syntax\n\nHere's a complete example with dimensions, measures, and joins:\n\n<yamlcontent path=\"yaml_example.yaml\"></yamlcontent>\n\n<note type=\"warning\">\nIn YAML configuration, **only unbound syntax (`_`) is accepted** for expressions. Lambda expressions are not supported in YAML files.\n</note>\n\n## Loading YAML Models\n\nIbis table objects must be created separately in Python and passed to the YAML loader. Tables are resolved by the names specified in the YAML `table` field.\n\nCreate your ibis tables:\n\n```yaml_setup\nimport ibis\n\nflights_tbl = ibis.memtable({\n    \"origin\": [\"JFK\", \"LAX\", \"SFO\"],\n    \"dest\": [\"LAX\", \"SFO\", \"JFK\"],\n    \"carrier\": [\"AA\", \"UA\", \"DL\"],\n    \"year\": [2023, 2023, 2024],\n    \"distance\": [2475, 337, 382]\n})\n\ncarriers_tbl = ibis.memtable({\n    \"code\": [\"AA\", \"UA\", \"DL\"],\n    \"name\": [\"American Airlines\", \"United Airlines\", \"Delta Air Lines\"]\n})\n```\n\nAnd pass them to the loaded YAML file defining your Semantic Tables:\n\n\n```load_yaml_example\nfrom boring_semantic_layer import from_yaml\n\n# Load models from YAML file\nmodels = from_yaml(\n    \"content/yaml_example.yaml\",\n    tables={\n        \"flights_tbl\": flights_tbl,\n        \"carriers_tbl\": carriers_tbl\n    }\n)\n\nflights_sm = models[\"flights\"]\ncarriers_sm = models[\"carriers\"]\n\n# Inspect the loaded models\nflights_sm.dimensions, flights_sm.measures\n```\n\n<regularoutput code-block=\"load_yaml_example\"></regularoutput>\n\n## Querying YAML Models\n\nYAML-defined models work exactly like Python-defined models. You can use the same `group_by()` and `aggregate()` methods to query your data.\n\n```query_yaml_model\n# Query the YAML-defined model\nresult = (\n    flights_sm\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"avg_distance\")\n)\n```\n\n<bslquery code-block=\"query_yaml_model\"></bslquery>\n\n## Next Steps\n\n- See [Building Semantic Tables](/building/semantic-tables) for Python-based definitions\n- Learn [Query Methods](/querying/methods) for querying YAML-defined models\n- Explore [Composing Models](/building/compose) for joining YAML models\n",
  "queries": {
    "load_yaml_example": {
      "output": [
        "('origin', 'destination', 'year', 'carrier')",
        "('flight_count', 'total_distance', 'avg_distance')"
      ]
    },
    "query_yaml_model": {
      "code": "# Query the YAML-defined model\nresult = (\n    flights_sm\n    .group_by(\"origin\")\n    .aggregate(\"flight_count\", \"avg_distance\")\n)",
      "sql": "SELECT\n  *\nFROM (\n  SELECT\n    \"t1\".\"origin\",\n    COUNT(*) AS \"flight_count\",\n    AVG(\"t1\".\"distance\") AS \"avg_distance\"\n  FROM (\n    SELECT\n      *\n    FROM \"ibis_pandas_memtable_2de5zq4rjbalpkvxiyf7czm6rm\" AS \"t0\"\n  ) AS \"t1\"\n  GROUP BY\n    1\n) AS \"t2\"",
      "table": {
        "columns": [
          "origin",
          "flight_count",
          "avg_distance"
        ],
        "data": [
          [
            "SFO",
            1,
            382.0
          ],
          [
            "LAX",
            1,
            337.0
          ],
          [
            "JFK",
            1,
            2475.0
          ]
        ]
      },
      "chart": {
        "type": "vega",
        "spec": {
          "config": {
            "view": {
              "continuousWidth": 300,
              "continuousHeight": 300
            }
          },
          "data": {
            "name": "data-a056b2f336c39790a24c67d49a5c81ca"
          },
          "mark": {
            "type": "bar"
          },
          "encoding": {
            "color": {
              "field": "measure",
              "type": "nominal"
            },
            "tooltip": [
              {
                "field": "origin",
                "type": "nominal"
              },
              {
                "field": "measure",
                "type": "nominal"
              },
              {
                "field": "value",
                "type": "quantitative"
              }
            ],
            "x": {
              "field": "origin",
              "sort": null,
              "type": "ordinal"
            },
            "xOffset": {
              "field": "measure"
            },
            "y": {
              "field": "value",
              "type": "quantitative"
            }
          },
          "height": 400,
          "transform": [
            {
              "fold": [
                "flight_count",
                "avg_distance"
              ],
              "as": [
                "measure",
                "value"
              ]
            }
          ],
          "width": 700,
          "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json",
          "datasets": {
            "data-a056b2f336c39790a24c67d49a5c81ca": [
              {
                "origin": "LAX",
                "flight_count": 1,
                "avg_distance": 337.0
              },
              {
                "origin": "JFK",
                "flight_count": 1,
                "avg_distance": 2475.0
              },
              {
                "origin": "SFO",
                "flight_count": 1,
                "avg_distance": 382.0
              }
            ]
          }
        }
      }
    }
  },
  "files": {
    "yaml_example.yaml": "flights:\n  table: flights_tbl\n  dimensions:\n    origin:\n      expr: _.origin\n      description: \"Flight origin airport code\"\n    destination:\n      expr: _.dest\n      description: \"Flight destination airport code\"\n    year:\n      expr: _.year\n      description: \"Flight year\"\n    carrier:\n      expr: _.carrier\n      description: \"Carrier code\"\n  measures:\n    flight_count:\n      expr: _.count()\n      description: \"Total number of flights\"\n    total_distance:\n      expr: _.distance.sum()\n      description: \"Total distance traveled\"\n    avg_distance:\n      expr: _.distance.mean()\n      description: \"Average flight distance\"\n\ncarriers:\n  table: carriers_tbl\n  dimensions:\n    code:\n      expr: _.code\n      description: \"Carrier code\"\n    name:\n      expr: _.name\n      description: \"Carrier name\"\n  measures:\n    carrier_count:\n      expr: _.count()\n      description: \"Number of carriers\"\n"
  }
}