{
  "markdown": "# Limit & Filter\n\nControl result size and filter data in your semantic queries. BSL provides flexible filtering capabilities using both Ibis expressions and JSON syntax for LLM-friendly queries.\n\n## Limit Results\n\nUse the `limit` parameter to restrict the number of rows returned from your query. This is useful for quick data exploration and testing.\n\n```python\n# Get top 10 results\nresult = flights_sm.query(\n    dimensions=['origin'],\n    measures=['flight_count'],\n    limit=10\n).execute()\n```\n\n## Filter with Ibis Expressions\n\nFilter your data using lambda functions that leverage Ibis expressions. This provides a Pythonic way to express filter conditions with full access to Ibis operators.\n\n```python\n# Filter using lambda\nresult = flights_sm.query(\n    dimensions=['origin'],\n    measures=['flight_count'],\n    filters=[lambda t: t.origin == 'JFK']\n).execute()\n```\n\nThe lambda function receives the table reference and can use any Ibis comparison operators (`==`, `!=`, `>`, `<`, `>=`, `<=`) and logical operators (`&`, `|`, `~`).\n\n## Filter with JSON (LLM-friendly)\n\nBSL supports JSON-based filter syntax that is particularly useful for LLM-generated queries and API integrations. The JSON format provides a structured way to express complex filter conditions.\n\n```python\n# Filter using JSON syntax\nresult = flights_sm.query(\n    dimensions=['origin'],\n    measures=['flight_count'],\n    filters=[\n        {\n            'operator': 'AND',\n            'conditions': [\n                {'field': 'origin', 'operator': 'in', 'values': ['JFK', 'LGA']},\n                {'field': 'year', 'operator': '=', 'values': [2013]}\n            ]\n        }\n    ]\n).execute()\n```\n\nThe JSON filter format supports:\n- Logical operators: `AND`, `OR`\n- Comparison operators: `=`, `!=`, `>`, `<`, `>=`, `<=`, `in`\n- Nested conditions for complex logic\n- Multiple values for operators like `in`\n\nThis JSON syntax makes it easy for LLMs to generate valid filter conditions without needing to understand Python lambda syntax.\n",
  "queries": {},
  "files": {}
}